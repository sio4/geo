// gpxdata10.go: based on the code generated by xsdgen.
// http://www.cluetrust.com/Schemas/gpxdata10.xsd

package gpx

import (
	"encoding/xml"
	"time"

	"github.com/sio4/geo/xsd"
)

type Anon1 struct {
	Lap []LapType `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 lap,omitempty"`
}

type CourseType struct {
	Index int   `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 index,omitempty"`
	Laps  Anon1 `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 laps,omitempty"`
}

// dataPt is used to store information about non-geographic data point.  This is useful when HR or other
// data is present, but no latitude or longitude data is.
type DataPointType struct {
	Time     time.Time `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 time"`
	Ele      float64   `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 ele,omitempty"`
	Hr       string    `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 hr,omitempty"`
	Cadence  string    `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 cadence,omitempty"`
	Temp     string    `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 temp,omitempty"`
	Distance string    `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 distance,omitempty"`
	Sensor   string    `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 sensor,omitempty"`
}

func (t *DataPointType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DataPointType
	var layout struct {
		*T
		Time *xsd.DateTime `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 time"`
	}
	layout.T = (*T)(t)
	layout.Time = (*xsd.DateTime)(&layout.T.Time)
	return e.EncodeElement(layout, start)
}

func (t *DataPointType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DataPointType
	var overlay struct {
		*T
		Time *xsd.DateTime `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 time"`
	}
	overlay.T = (*T)(t)
	overlay.Time = (*xsd.DateTime)(&overlay.T.Time)
	return d.DecodeElement(&overlay, &start)
}

type DistanceType struct {
	Value  float64    `xml:",chardata"`
	Sensor SensorKind `xml:"sensor,attr,omitempty"`
}

// May be one of rest, active
type IntensityKind string

type LapType struct {
	Index          int                `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 index,omitempty"`
	StartPoint     LocationType       `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 startPoint,omitempty"`
	EndPoint       LocationType       `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 endPoint,omitempty"`
	StartTime      time.Time          `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 startTime,omitempty"`
	ElapsedTime    float32            `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 elapsedTime,omitempty"`
	Calories       int                `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 calories,omitempty"`
	Distance       float32            `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 distance,omitempty"`
	TrackReference TrackReferenceType `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 trackReference,omitempty"`
	Summary        []SummaryType      `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 summary,omitempty"`
	Trigger        TriggerType        `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 trigger,omitempty"`
	Intensity      IntensityKind      `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 intensity,omitempty"`
}

func (t *LapType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T LapType
	var layout struct {
		*T
		StartTime *xsd.DateTime `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 startTime,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartTime = (*xsd.DateTime)(&layout.T.StartTime)
	return e.EncodeElement(layout, start)
}

func (t *LapType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LapType
	var overlay struct {
		*T
		StartTime *xsd.DateTime `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 startTime,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartTime = (*xsd.DateTime)(&overlay.T.StartTime)
	return d.DecodeElement(&overlay, &start)
}

type Laps struct {
	Lap []LapType `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 lap,omitempty"`
}

// TODO check this
type LocationType struct {
	Lat float64 `xml:"lat,attr"`
	Lon float64 `xml:"lon,attr"`
}

type RunType struct {
	Sport       SportType `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 sport,omitempty"`
	ProgramType string    `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 programType,omitempty"`
	Laps        Laps      `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 laps,omitempty"`
}

// May be one of wheel, pedometer
type SensorKind string

type SensorType struct {
	Kind SensorKind `xml:"kind,attr"`
}

// May be one of bike, run, other
type SportType string

// May be one of max, min, avg
type SummaryKind string

type SummaryType struct {
	Value float64     `xml:",chardata"`
	Name  string      `xml:"name,attr"`
	Kind  SummaryKind `xml:"kind,attr"`
}

type TrackReferenceType struct {
	StartPoint  int    `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 startPoint,omitempty"`
	EndPoint    int    `xml:"http://www.cluetrust.com/XML/GPXDATA/1/0 endPoint,omitempty"`
	TrackNumber int    `xml:"trackNumber,attr,omitempty"`
	TrackName   string `xml:"trackName,attr,omitempty"`
}

// May be one of manual, time, distance, location, hr
type TriggerKind string

type TriggerType struct {
	Value string      `xml:",chardata"`
	Kind  TriggerKind `xml:"kind,attr"`
}
