// Code generated by xsdgen. DO NOT EDIT.

package tcx

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AbstractProfileActivityt struct {
	MaximumHeartRateBpm HeartRateInBeatsPerMinutet `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 MaximumHeartRateBpm"`
	RestingHeartRateBpm HeartRateInBeatsPerMinutet `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 RestingHeartRateBpm,omitempty"`
	GearWeightKilograms float64                    `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 GearWeightKilograms"`
	HeartRateZones      []ProfileHeartRateZonet    `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 HeartRateZones"`
	SpeedZones          []ProfileSpeedZonet        `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 SpeedZones"`
	Extensions          Extensionst                `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Extensions,omitempty"`
}

type BikeDatat struct {
	Name             OptRestrictedTokent `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Name"`
	OdometerMeters   float64             `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 OdometerMeters"`
	WeightKilograms  float64             `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 WeightKilograms"`
	WheelSize        WheelDatat          `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 WheelSize"`
	Extensions       Extensionst         `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Extensions,omitempty"`
	HasCadenceSensor bool                `xml:"HasCadenceSensor,attr"`
	HasPowerSensor   bool                `xml:"HasPowerSensor,attr"`
}

// Profile with extensions for new bicycle specific data
type BikeProfileActivityt struct {
	MaximumHeartRateBpm HeartRateInBeatsPerMinutet `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 MaximumHeartRateBpm"`
	RestingHeartRateBpm HeartRateInBeatsPerMinutet `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 RestingHeartRateBpm,omitempty"`
	GearWeightKilograms float64                    `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 GearWeightKilograms"`
	HeartRateZones      []ProfileHeartRateZonet    `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 HeartRateZones"`
	SpeedZones          []ProfileSpeedZonet        `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 SpeedZones"`
	Extensions          Extensionst                `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Extensions,omitempty"`
	Bike                []BikeDatat                `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Bike"`
	Sport               Sportt                     `xml:"Sport,attr"`
}

type CustomSpeedZonet struct {
	ViewAs                SpeedTypet `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 ViewAs"`
	LowInMetersPerSecond  float64    `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 LowInMetersPerSecond"`
	HighInMetersPerSecond float64    `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 HighInMetersPerSecond"`
}

type Extensionst []string

func (a Extensionst) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	var output struct {
		ArrayType string   `xml:"http://schemas.xmlsoap.org/wsdl/ arrayType,attr"`
		Items     []string `xml:" item"`
	}
	output.Items = []string(a)
	start.Attr = append(start.Attr, xml.Attr{Name: xml.Name{"", "xmlns:ns1"}, Value: "http://www.w3.org/2001/XMLSchema"})
	output.ArrayType = "ns1:anyType[]"
	return e.EncodeElement(&output, start)
}
func (a *Extensionst) UnmarshalXML(d *xml.Decoder, start xml.StartElement) (err error) {
	var tok xml.Token
	for tok, err = d.Token(); err == nil; tok, err = d.Token() {
		if tok, ok := tok.(xml.StartElement); ok {
			var item string
			if err = d.DecodeElement(&item, &tok); err == nil {
				*a = append(*a, item)
			}
		}
		if _, ok := tok.(xml.EndElement); ok {
			break
		}
	}
	return err
}

// May be one of Male, Female
type Gendert string

type HeartRateInBeatsPerMinutet struct {
	Value byte `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Value"`
}

// May be one of Percent Max, Beats Per Minute
type HeartRateTypet string

// May be no more than 15 items long
type OptRestrictedTokent string

// User Activity Profile
type ProfileActivityt struct {
	MaximumHeartRateBpm HeartRateInBeatsPerMinutet `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 MaximumHeartRateBpm"`
	RestingHeartRateBpm HeartRateInBeatsPerMinutet `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 RestingHeartRateBpm,omitempty"`
	GearWeightKilograms float64                    `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 GearWeightKilograms"`
	HeartRateZones      []ProfileHeartRateZonet    `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 HeartRateZones"`
	SpeedZones          []ProfileSpeedZonet        `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 SpeedZones"`
	Extensions          Extensionst                `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Extensions,omitempty"`
	Sport               Sportt                     `xml:"Sport,attr"`
}

type ProfileDatat struct {
	BirthDate       time.Time                  `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 BirthDate"`
	WeightKilograms float64                    `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 WeightKilograms"`
	Gender          Gendert                    `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Gender"`
	Activities      []AbstractProfileActivityt `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Activities,omitempty"`
	TimeStamp       time.Time                  `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 TimeStamp,omitempty"`
	Extensions      Extensionst                `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Extensions,omitempty"`
}

func (t *ProfileDatat) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ProfileDatat
	var layout struct {
		*T
		BirthDate *xsdDate     `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 BirthDate"`
		TimeStamp *xsdDateTime `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 TimeStamp,omitempty"`
	}
	layout.T = (*T)(t)
	layout.BirthDate = (*xsdDate)(&layout.T.BirthDate)
	layout.TimeStamp = (*xsdDateTime)(&layout.T.TimeStamp)
	return e.EncodeElement(layout, start)
}
func (t *ProfileDatat) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ProfileDatat
	var overlay struct {
		*T
		BirthDate *xsdDate     `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 BirthDate"`
		TimeStamp *xsdDateTime `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 TimeStamp,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.BirthDate = (*xsdDate)(&overlay.T.BirthDate)
	overlay.TimeStamp = (*xsdDateTime)(&overlay.T.TimeStamp)
	return d.DecodeElement(&overlay, &start)
}

type ProfileHeartRateZonet struct {
	Number int                        `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Number"`
	ViewAs HeartRateTypet             `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 ViewAs"`
	Low    HeartRateInBeatsPerMinutet `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Low"`
	High   HeartRateInBeatsPerMinutet `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 High"`
}

type ProfileSpeedZonet struct {
	Number int              `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Number"`
	Name   RestrictedTokent `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Name,omitempty"`
	Value  CustomSpeedZonet `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Value"`
}

// May be no more than 15 items long
type RestrictedTokent string

// May be one of Pace, Speed
type SpeedTypet string

// May be one of Running, Biking, Other
type Sportt string

// Token must be defined as a type because of a bug in the MSXML parser which
// does not correctly process xsd:token using the whiteSpace value of "collapse"
type Tokent string

type WheelDatat struct {
	SizeMillimeters int         `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 SizeMillimeters"`
	Extensions      Extensionst `xml:"http://www.garmin.com/xmlschemas/UserProfile/v2 Extensions,omitempty"`
	AutoWheelSize   bool        `xml:"AutoWheelSize,attr"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
